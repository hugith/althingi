package althingi.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import althingi.data.Committee;
import althingi.data.Person;

/**
 * Class _CommitteeMembership was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CommitteeMembership extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<LocalDateTime> CREATION_DATE = Property.create("creationDate", LocalDateTime.class);
    public static final Property<LocalDate> DATE_FROM = Property.create("dateFrom", LocalDate.class);
    public static final Property<LocalDate> DATE_TO = Property.create("dateTo", LocalDate.class);
    public static final Property<LocalDateTime> MODIFICATION_DATE = Property.create("modificationDate", LocalDateTime.class);
    public static final Property<String> STATUS = Property.create("status", String.class);
    public static final Property<String> UNIQUE_ID = Property.create("uniqueID", String.class);
    public static final Property<Committee> COMMITTEE = Property.create("committee", Committee.class);
    public static final Property<Person> PERSON = Property.create("person", Person.class);

    protected LocalDateTime creationDate;
    protected LocalDate dateFrom;
    protected LocalDate dateTo;
    protected LocalDateTime modificationDate;
    protected String status;
    protected String uniqueID;

    protected Object committee;
    protected Object person;

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime getCreationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setDateFrom(LocalDate dateFrom) {
        beforePropertyWrite("dateFrom", this.dateFrom, dateFrom);
        this.dateFrom = dateFrom;
    }

    public LocalDate getDateFrom() {
        beforePropertyRead("dateFrom");
        return this.dateFrom;
    }

    public void setDateTo(LocalDate dateTo) {
        beforePropertyWrite("dateTo", this.dateTo, dateTo);
        this.dateTo = dateTo;
    }

    public LocalDate getDateTo() {
        beforePropertyRead("dateTo");
        return this.dateTo;
    }

    public void setModificationDate(LocalDateTime modificationDate) {
        beforePropertyWrite("modificationDate", this.modificationDate, modificationDate);
        this.modificationDate = modificationDate;
    }

    public LocalDateTime getModificationDate() {
        beforePropertyRead("modificationDate");
        return this.modificationDate;
    }

    public void setStatus(String status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public String getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setUniqueID(String uniqueID) {
        beforePropertyWrite("uniqueID", this.uniqueID, uniqueID);
        this.uniqueID = uniqueID;
    }

    public String getUniqueID() {
        beforePropertyRead("uniqueID");
        return this.uniqueID;
    }

    public void setCommittee(Committee committee) {
        setToOneTarget("committee", committee, true);
    }

    public Committee getCommittee() {
        return (Committee)readProperty("committee");
    }

    public void setPerson(Person person) {
        setToOneTarget("person", person, true);
    }

    public Person getPerson() {
        return (Person)readProperty("person");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "creationDate":
                return this.creationDate;
            case "dateFrom":
                return this.dateFrom;
            case "dateTo":
                return this.dateTo;
            case "modificationDate":
                return this.modificationDate;
            case "status":
                return this.status;
            case "uniqueID":
                return this.uniqueID;
            case "committee":
                return this.committee;
            case "person":
                return this.person;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "dateFrom":
                this.dateFrom = (LocalDate)val;
                break;
            case "dateTo":
                this.dateTo = (LocalDate)val;
                break;
            case "modificationDate":
                this.modificationDate = (LocalDateTime)val;
                break;
            case "status":
                this.status = (String)val;
                break;
            case "uniqueID":
                this.uniqueID = (String)val;
                break;
            case "committee":
                this.committee = val;
                break;
            case "person":
                this.person = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.creationDate);
        out.writeObject(this.dateFrom);
        out.writeObject(this.dateTo);
        out.writeObject(this.modificationDate);
        out.writeObject(this.status);
        out.writeObject(this.uniqueID);
        out.writeObject(this.committee);
        out.writeObject(this.person);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.creationDate = (LocalDateTime)in.readObject();
        this.dateFrom = (LocalDate)in.readObject();
        this.dateTo = (LocalDate)in.readObject();
        this.modificationDate = (LocalDateTime)in.readObject();
        this.status = (String)in.readObject();
        this.uniqueID = (String)in.readObject();
        this.committee = in.readObject();
        this.person = in.readObject();
    }

}
